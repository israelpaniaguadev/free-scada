//// WARN: This is a LOCAL DATABASE schema!
//// NOTE: Basic config

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//// NOTE: The protocols table only holds a supported 
//// protocols list. Is up to the final user to 
//// choose which protocols to include or exclude.

model Protocol {
  id Int @id @default(autoincrement())
  name String @unique
  details String @default("N/A")

  @@index([id, name])
}

//// WARN: Need to solve the remote-local mapping.
//// NOTE: The final user should implement the 
//// device details. The devices table it's just a 
//// 'header' to make the Free-SCADA system independent 
//// from the hardware devices, as an OS is independent 
//// from the computer's hardware.

model Device {
  id Int @id @default(autoincrement())
  name String @unique
  description String @default("-")
  manufacturer String @default("-")
  model String @default("-")

  @@index([id, name])
}

//// NOTE: Is up to the final user to define and create the 
//// specific alarms to use with the system. If a specific 
//// value needs to be attached, it may be added to the 
//// database and the corresponding implementation class. 

model Alarm {
  id Int @id @default(autoincrement())
  name String @unique
  description String @default("-")

  @@index([id, name])
}

//// NOTE: Is up to the final user to define and create the 
//// specific signals for each device. If a specific value 
//// needs to be attached to the signal, like signal codes or 
//// something, they should be added to the database and 
//// implement the DeviceCommonInterface to work with that 
//// specific value.

model Signal {
  id Int @id @default(autoincrement())
  name String @unique
  description String @default("-")

  @@index([id, name])
}

//// NOTE: Is up to the final user to define and create the 
//// specific states for each device. If a special value, like 
//// a state flag, is needed, it must be added to the database 
//// and implemented into an implementation of the 
//// DeviceCommonInterface.

model State {
  id Int @id @default(autoincrement())
  name String @unique
  description String @default("-")

  @@index([id, name])
}

//// NOTE: Is up to the final user to create and define the specific 
//// measures retrieved from each device.

model Measure {
  id Int @id @default(autoincrement())
  measure String @unique
  unit String @unique

  @@index([id, measure, unit])
}

//// INFO: Relationships implementation

//// NOTE: The retrieved measures for each device type.
//// Is up to the final user to configure this table.

model deviceSupportedMeasure {
  id Int @id @default(autoincrement())
  deviceId Int
  measureId Int

  device Device @relation(fields: [deviceId], references: [id])
  measure Measure @relation(fields: [measureId], references: [id])
  @@index([deviceId, measureId])
}

//// NOTE: The 
